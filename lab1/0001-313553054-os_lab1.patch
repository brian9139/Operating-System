From aa489e2b24755f61eb70720ff60bfaffa2356d2b Mon Sep 17 00:00:00 2001
From: 313553054 <brian.cs13@nycu.edu.tw>
Date: Sun, 13 Oct 2024 19:21:38 +0800
Subject: [PATCH] 313553054 os_lab1

---
 Kbuild                                 |  2 ++
 arch/x86/entry/syscalls/syscall_64.tbl |  2 +-
 include/linux/syscalls.h               |  2 ++
 include/uapi/asm-generic/unistd.h      |  3 +-
 stGknLzo                               |  1 +
 sys_revstr/Makefile                    |  1 +
 sys_revstr/sys_revstr.c                | 47 ++++++++++++++++++++++++++
 7 files changed, 56 insertions(+), 2 deletions(-)
 create mode 100644 stGknLzo
 create mode 100644 sys_revstr/Makefile
 create mode 100644 sys_revstr/sys_revstr.c

diff --git a/Kbuild b/Kbuild
index 464b34a08..678e1d9df 100644
--- a/Kbuild
+++ b/Kbuild
@@ -97,3 +97,5 @@ obj-$(CONFIG_SAMPLES)	+= samples/
 obj-$(CONFIG_NET)	+= net/
 obj-y			+= virt/
 obj-y			+= $(ARCH_DRIVERS)
+obj-y                   += sys_revstr/
+
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..111341f58 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,7 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
-
+451     common  revstr                  sys_revstr
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..113f3ec4a 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1056,6 +1056,7 @@ asmlinkage long sys_memfd_secret(unsigned int flags);
 asmlinkage long sys_set_mempolicy_home_node(unsigned long start, unsigned long len,
 					    unsigned long home_node,
 					    unsigned long flags);
+asmlinkage long sys_revstr(char __user * user_str, size_t len);					    
 
 /*
  * Architecture-specific system calls
@@ -1385,4 +1386,5 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+int __sys_revstr(char __user * user_str, size_t len);
 #endif
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 45fa180cc..bb756a605 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -885,7 +885,8 @@ __SYSCALL(__NR_futex_waitv, sys_futex_waitv)
 
 #define __NR_set_mempolicy_home_node 450
 __SYSCALL(__NR_set_mempolicy_home_node, sys_set_mempolicy_home_node)
-
+#define __NR_revstr 451
+int syscall(__NR_revstr, char *str, size_t n);
 #undef __NR_syscalls
 #define __NR_syscalls 451
 
diff --git a/stGknLzo b/stGknLzo
new file mode 100644
index 000000000..69343ebd5
--- /dev/null
+++ b/stGknLzo
@@ -0,0 +1 @@
+!<thin>
diff --git a/sys_revstr/Makefile b/sys_revstr/Makefile
new file mode 100644
index 000000000..6e4a8b42b
--- /dev/null
+++ b/sys_revstr/Makefile
@@ -0,0 +1 @@
+obj-y := sys_revstr.o
diff --git a/sys_revstr/sys_revstr.c b/sys_revstr/sys_revstr.c
new file mode 100644
index 000000000..4a95ae849
--- /dev/null
+++ b/sys_revstr/sys_revstr.c
@@ -0,0 +1,47 @@
+#include <linux/kernel.h>     // Needed for kernel log functions
+#include <linux/syscalls.h>   // Needed for system calls
+#include <linux/uaccess.h>    // Needed for copy_from_user and copy_to_user
+
+// The sys_revstr system call implementation
+SYSCALL_DEFINE2(revstr, char __user *, user_str, int, len)
+{
+    char *kernel_buffer;
+    int i;
+
+    // Allocate memory for the kernel buffer to store the string
+    kernel_buffer = kmalloc(len + 1, GFP_KERNEL);
+    if (!kernel_buffer)
+        return -ENOMEM;  // Return error if memory allocation fails
+
+    // Copy the string from user space to kernel space
+    if (copy_from_user(kernel_buffer, user_str, len)) {
+        kfree(kernel_buffer);
+        return -EFAULT;  // Return error if copying from user space fails
+    }
+
+    kernel_buffer[len] = '\0';  // Null-terminate the string
+
+    // Print the original string to the kernel ring buffer
+    printk(KERN_INFO "The origin string: %s\n", kernel_buffer);
+
+    // Reverse the string in kernel_buffer
+    for (i = 0; i < len / 2; i++) {
+        char temp = kernel_buffer[i];
+        kernel_buffer[i] = kernel_buffer[len - i - 1];
+        kernel_buffer[len - i - 1] = temp;
+    }
+
+
+    // Print the reversed string to the kernel ring buffer
+    printk(KERN_INFO "The reversed string: %s\n", kernel_buffer);
+
+    // Copy the reversed string from kernel space back to user space
+    if (copy_to_user(user_str, kernel_buffer, len)) {
+        kfree(kernel_buffer);
+        return -EFAULT;  // Return error if copying to user space fails
+    }
+
+    kfree(kernel_buffer);  // Free the kernel buffer memory
+    return 0;  // Return success
+}
+
-- 
2.43.0

